
|--------------------------------------------------------------------------------------------------------------------------------------
[submodule "lib/SDL2"]
	path = lib/SDL2
	url = https://github.com/libsdl-org/SDL.git

|--------------------------------------------------------------------------------------------------------------------------------------
alignas(alignment) uint8_t neuron_data[neuron_data_size*2];//промежуточные данные нейронов


const WEIGHT* const weight = weight_data;

for(uint16_t layer_i = 1, weight_i = 0; layer_i < num_layers; ++layer_i){
    const uint16_t number_connection = layer_sizes[layer_i-1];
    const uint16_t number_connection_number_by_32 = (number_connection/32)*32;
    const uint16_t number_connection_number_by_16 = (number_connection/16)*16;
    const uint16_t number_connection_number_by_8 = (number_connection/8)*8;
    const uint16_t number_connection_number_by_4 = (number_connection/4)*4;
    const uint16_t number_of_residual_compounds = number_connection%4;


    uint16_t i = 0;

    const uint8_t neuron_data_flip = layer_i%2;
    const uint8_t offset_of_weight_data = layer_sizes[i-1]*sizeof(WEIGHT))%alignment;

    switch(layer_i){
    default:
        const INTERMEDIATE* const input = neuron_data[neuron_data_flip ? 0 : neuron_data_size];
        OUTPUT* const output = neuron_data[neuron_data_flip ? neuron_data_size : 0];
    break;
    case 1:
        const INPUT* const input = input_data;
        INTERMEDIATE* const output = neuron_data[neuron_data_flip ? neuron_data_size : 0];
    break;
    case num_layers-1:
        const INTERMEDIATE* const input = neuron_data[neuron_data_flip ? 0 : neuron_data_size];
        INTERMEDIATE* const output = output_data;
    break;
    }
    [[assume(input != output)]];


    for (; i < number_connection_number_by_32; ++i, ++weight_i) {
        output[i] += input[i] * weight[weight_i];
    }

    // AVX-512
    for (; i < number_connection_number_by_16; ++i, ++weight_i) {
        output[i] += input[i] * weight[weight_i];
    }

    // AVX/AVX2
    for (; i < number_connection_number_by_8; ++i, ++weight_i) {
        output[i] += input[i] * weight[weight_i];
    }

    // SSE
    for (; i < number_connection_number_by_4; ++i, ++weight_i) {
        output[i] += input[i] * weight[weight_i];
    }

    // Остаточные элементы
    for (; i < number_of_residual_compounds); ++i, ++weight_i) {
        output[i] += input[i] * weight[weight_i];
    }
    weight_i + offset_of_weight_data;

}
|--------------------------------------------------------------------------------------------------------------------------------------
//пока нетрогать
template <const uint32_t num_layers, const uint32_t layer_sizes[num_layers]>
struct const_neural_object32 {
alignas(64) float neuron_data[quantity_neurons(num_layers, layer_sizes)];//промежуточные данные нейронов
alignas(64) float weight_data[quantity_weight_data(num_layers, layer_sizes)];//ссылка на данные весов

float_neuron neuron[quantity_neurons(num_layers, layer_sizes)];

const_neural_object32(){

#if DEBUG
if(num_layers < 2)
    throw std::runtime_error("failed to create const_neural_object("/* + name + */"): layers < 2!");

for (uint32_t i = 0; i < num_layers; --i) {
    if (layer_sizes[i] == 0)
        throw std::runtime_error("failed to create const_neural_object("/* + name + */"): 0 neurons per layer!");
}
#endif


uint32_t neuron_number = 0, number_of_the_first_neuron_of_the_layer = 0, number_of_the_first_connection_of_the_neuron = 0, i = 1;
for(; i < num_layers ;++i){
    for(uint32_t i1{0}; i1 < layer_sizes[i] ;++i1,++neuron_number){
        neuron[neuron_number] = float_neuron(
                                            layer_sizes[i],
                                            &neuron_data[number_of_the_first_neuron_of_the_layer],
                                            &weight_data[number_of_the_first_connection_of_the_neuron]
                                            );
        number_of_the_first_connection_of_the_neuron += layer_sizes[i-1];
    }
number_of_the_first_neuron_of_the_layer += layer_sizes[i-1];
}
}
void random_weight() {
    for (uint32_t i{0}; i < quantity_weight_data(num_layers, layer_sizes); ++i)
        weight_data[i] = get_random<float>(0.0f, 1.0f);
}

uint32_t mind(){

    for(int i{0}; i < quantity_neurons(num_layers, layer_sizes); ++i)
        neuron_data[i + layer_sizes[0]] = neuron[i].calculate_dot_product();


    float max_value = 0, max_value_index = 0;
    for(uint32_t i{0}; i < layer_sizes[num_layers-1]; ++i)
    if(max_value < neuron_data[layer_sizes[num_layers-2] + i]){
        max_value = neuron_data[layer_sizes[num_layers-2] + i];
        max_value_index = i;
    }
    return max_value_index;
}
};


|--------------------------------------------------------------------------------------------------------------------------------------

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(neural_network_SDL PUBLIC
        # Базовые настройки
        -O0                   # Отключение оптимизаций для отладки
        -flto                 # Link-Time Optimization
        -g                    # Включение отладочной информации
        -ggdb3                # Расширенная отладочная информация для GDB
        -fno-omit-frame-pointer # Сохранение указателя фрейма для бектрейсов



        # Санитайзеры (раскомментировать при необходимости)
        # -fsanitize=address   # Детектор утечек памяти (AddressSanitizer)
    )

elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(neural_network_SDL PUBLIC
        # Агрессивная оптимизация
        -O3                   # Максимальная оптимизация скорости
        -flto
        -march=native         # Использование инструкций целевого процессора

        # Отключение отладки
        -DNDEBUG              # Деактивация assert и отладочного кода

        # Безопасность
        -fstack-protector-strong # Защита от переполнений стека
    )

elseif(CMAKE_BUILD_TYPE STREQUAL "Test")
    target_compile_options(neural_network_SDL PUBLIC
        # Гибридные настройки
        -O3                   # Оптимизация для тестов производительности
        -g
        -ggdb3
        -fno-omit-frame-pointer
        -DDEBUG               # Активация отладочного кода

        # Диагностика
        -Wall
        -Wextra
        -pedantic
        -Winvalid-pch
        -fopt-info-vec
        -fopt-info-vec-missed
        -fopt-info-vec-optimized
        -ftime-report

        # Безопасность
        -fstack-protector-strong # Защита от переполнений стека

        # LTO и специфические флаги
        -flto
        -march=native
    )
endif()


find_package(NUMA)
if(NUMA_FOUND)
    add_definitions(-DHAVE_NUMA=1)
else()
    add_definitions(-DHAVE_NUMA=0)
endif()



target_compile_options(neural_network_SDL PUBLIC
    -lmingw32
    -mwindows
    -fexceptions
    -static-libstdc++
    -static-libgcc
    -static
    -lstdc++

    -fdiagnostics-color=always

    -mavx
    -mavx2
)

|--------------------------------------------------------------------------------------------------------------------------------------

#if __has_include(<memory>) && defined(__cpp_lib_aligned_new)
    #include <memory> // для std::aligned_alloc
    #define HAS_STD_ALIGNED_MALLOC
#endif

#if defined(HAS_STD_ALIGNED_MALLOC)
    #define my_aligned_malloc(size, alignment) std::aligned_alloc(alignment, size)
    #define my_aligned_free(ptr) aligned_free(ptr)
#else
    #define my_aligned_malloc(size, alignment) _my_aligned_malloc(size, alignment, __FILE__, __LINE__)
    #define my_aligned_free(ptr) _my_aligned_free(ptr)


#include <cstdlib> // Для malloc и free
#include <stdexcept> // Для исключений


static std::ofstream filememory("memory.txt", std::ios::out);

// Собственная реализация aligned_malloc
void* _my_aligned_malloc(uint64_t size, uint64_t alignment, const char* file, int line) {
    #if DEBUG
    // Проверка, что alignment является степенью двойки
    if (alignment == 0 || (alignment & (alignment - 1)) != 0) {
        throw std::invalid_argument(
            std::string("Alignment must be a power of two. [File: ") + file + ", Line: " + std::to_string(line) + "]"
        );
    }
    // Проверка, что size больше 0
    if (size <= 0) {
        throw std::invalid_argument(
            std::string("size <= 0 (") + std::to_string(size) + "). [File: " + file + ", Line: " + std::to_string(line) + "]"
        );
    }
    #endif

    // Выделяем память с дополнительным запасом для выравнивания
    uint64_t extra = alignment - 1 + sizeof(void*);
    void* original = std::malloc(size + extra);
    if (!original) {
        throw std::runtime_error(
            std::string("Failed to allocate memory. [File: ") + file + ", Line: " + std::to_string(line) + "]"
        );
    }

    // Выравниваем указатель
    void* aligned = reinterpret_cast<void*>(
        (reinterpret_cast<uintptr_t>(original) + extra) & ~(alignment - 1)
    );

    // Сохраняем оригинальный указатель перед выровненным блоком
    reinterpret_cast<void**>(aligned)[-1] = original;

    filememory << "file:" << file << ", line:" << line << " Allocation of aligned memory with alignment = " << alignment << ", size = " << size << " and address = " << original << "\n";

    return aligned;
}

// Собственная реализация aligned_free
void _my_aligned_free(void* ptr) {
    if (ptr) {
        // Восстанавливаем оригинальный указатель
        void* original = reinterpret_cast<void**>(ptr)[-1];
        std::free(original);
    }
}
#endif

|--------------------------------------------------------------------------------------------------------------------------------------


__attribute__((always_inline)) void operator+=(__m128& a, const __m128& b) {
    a = _mm_add_ps(a, b);  // Складываем
}



cfcolor_rgb_cell operator*(float k) const {
    return cfcolor_rgb_cell{this.r  * k, this.g  * k, this.b  * k, this.a  * k};
}

inline float relu(float x) {
    return std::max(0.0f, x);
}
inline float leaky_relu(float x) {
    float alpha = 0.01;
    if (x > 0) {
        return x;
    }
    else {
        return alpha * x;
    }
}

// Предварительная загрузка следующего блока данных
__builtin_prefetch(&connections[0], 0, 3);
__builtin_prefetch(&weight_connections[0], 0, 3);

    // Предварительная загрузка следующего блока данных
    __builtin_prefetch(&connections[i+1], 0, 3);
    __builtin_prefetch(&weight_connections[i+1], 0, 3);

|--------------------------------------------------------------------------------------------------------------------------------------

struct neuron{
const uint32_t number_of_connections;

__m128* connections;

__m128* weight_connections;

float &output_value;

neuron(float& _output_value, const uint32_t _number_of_connections) : output_value(_output_value), number_of_connections(_number_of_connections/4) { /* инициализация ссылки*/
}

void set_connections(float* _connections, float* _weight_connections){
    connections = reinterpret_cast<__m128*>(_connections);
    weight_connections = reinterpret_cast<__m128*>(_weight_connections);
    return ;
}


inline void calculate_dot_product() {
__m128 product;
__m128 vec1 = _mm_setzero_ps();
alignas(16) float result[4];
for(int i{0}; i < number_of_connections; i++){

    connections[i] = _mm_max_ps(connections[i], vec1);

    // Попарное умножение элементов
    product = _mm_mul_ps(connections[i], weight_connections[i]);

    // Горизонтальное сложение всех элементов
    //product = _mm_hadd_ps(product, product);
    //__m128 temp2 = _mm_hadd_ps(temp1, temp1);

    // Извлечение результата в переменную типа T
    //_mm_store_ps(result, temp2);

    _mm_store_ps(result, product);
    result[0] = result[0] + result[1] + result[2] + result[3];

    output_value += result[0];
}
}

float run(){
calculate_dot_product();
//output_value = relu(output_value);
}
};

|--------------------------------------------------------------------------------------------------------------------------------------

for(int i{0}; i < number_of_connections; i++){

    connections[i] = _mm_max_ps(connections[i], vec1);

    // Попарное умножение элементов
    product = _mm_mul_ps(connections[i], weight_connections[i]);

    // Горизонтальное сложение всех элементов
    //product = _mm_hadd_ps(product, product);
    //__m128 temp2 = _mm_hadd_ps(temp1, temp1);

    // Извлечение результата в переменную типа T
    //_mm_store_ps(result, temp2);

    _mm_store_ps(result, product);
    result[0] = result[0] + result[1] + result[2] + result[3];

    output_value += result[0];
}

|--------------------------------------------------------------------------------------------------------------------------------------

float calculate_dot_product(float a1, float b1, float c1, float d1,
                            float a2, float b2, float c2, float d2) {
return a1*a2 + b1*b2 + c1*c2 + d1*d2;
}
float calculate_dot_product1(float a1, float b1, float c1, float d1,
                            float a2, float b2, float c2, float d2) {
    // Создаем векторы из переданных значений
    __m128 vec1 = _mm_set_ps(a1, b1, c1, d1);
    __m128 vec2 = _mm_set_ps(a2, b2, c2, d2);

    // Попарное умножение элементов
    __m128 product = _mm_mul_ps(vec1, vec2);

    // Горизонтальное сложение всех элементов
    __m128 temp1 = _mm_hadd_ps(product, product);
    __m128 temp2 = _mm_hadd_ps(temp1, temp1);

    // Извлечение результата в переменную типа float
    float result;
    _mm_store_ss(&result, temp2);

    return result;
}

    main_cpu_info();
std::cout << sizeof(float) << "\n";
float connections[4] = {3.20984,4.84543,8.92223,1.733};
__m128 connection = _mm_set_ps(connections[0], connections[1], connections[2], connections[3]);
__m128 weight_connections = _mm_set_ps(connections[0], connections[1], connections[2], connections[3]);

__m128 vec1 = _mm_set_ps(0.0f, 0.0f, 0.0f, 0.0f);
connection = _mm_max_ps(connection, vec1);

struct timespec ts[20];
clock_gettime(CLOCK_MONOTONIC, &ts[0]);
for(int i{1000000};i>0;i--)
{
    __m128 product = _mm_mul_ps(connection, weight_connections);

    __m128 temp1 = _mm_hadd_ps(product, product);
    __m128 temp2 = _mm_hadd_ps(temp1, temp1);

    float result;
    _mm_store_ss(&result, temp2);
}
clock_gettime(CLOCK_MONOTONIC, &ts[1]);
std::cout << ts[1].tv_nsec - ts[0].tv_nsec << std::endl;
clock_gettime(CLOCK_MONOTONIC, &ts[2]);
{
__m128 product;
for(int i{1000000};i>0;i--)
{
    __m128 product = _mm_mul_ps(connection, weight_connections);
    product = _mm_add_ps(product, product);


    float result[4];
    _mm_storeu_ps(result, product);
    result[0] = result[0] + result[1];
}
}
clock_gettime(CLOCK_MONOTONIC, &ts[3]);
std::cout << ts[3].tv_nsec - ts[2].tv_nsec << std::endl;
clock_gettime(CLOCK_MONOTONIC, &ts[4]);
{
__m128 product;
for(int i{1000000};i>0;i--)
{

    product = _mm_mul_ps(connection, weight_connections);


    float result[4];
    _mm_store_ps(result, product);
    result[0] = result[0] + result[1] + result[2] + result[3];
}
}
clock_gettime(CLOCK_MONOTONIC, &ts[5]);
std::cout << ts[5].tv_nsec - ts[4].tv_nsec << std::endl;
clock_gettime(CLOCK_MONOTONIC, &ts[6]);
{
__m128 product[2];
for(int i{1000000};i>0;i--){

    product[0] = _mm_mul_ps(connection, weight_connections);
    product[1] = _mm_mul_ps(connection, weight_connections);

    product[0] = _mm_add_ps(product[0], product[1]);
    float result[4];
    _mm_store_ps(result, product[0]);
    result[0] = result[0] + result[1] + result[2] + result[3];
}
}
clock_gettime(CLOCK_MONOTONIC, &ts[7]);
std::cout << (ts[7].tv_nsec - ts[6].tv_nsec)/2 << std::endl;
clock_gettime(CLOCK_MONOTONIC, &ts[8]);
for(int i{1000000};i>0;i--)
calculate_dot_product1(3.20984,4.84543,8.92223,1.733,3.20984,4.84543,8.92223,1.733);
clock_gettime(CLOCK_MONOTONIC, &ts[9]);
std::cout << (ts[9].tv_nsec - ts[8].tv_nsec) << std::endl;


|--------------------------------------------------------------------------------------------------------------------------------------
void cpuID(unsigned i, unsigned regs[4]) {
#ifdef _WIN32
  __cpuid((int *)regs, (int)i);

#else
  asm volatile
    ("cpuid" : "=a" (regs[0]), "=b" (regs[1]), "=c" (regs[2]), "=d" (regs[3])
     : "a" (i), "c" (0));
  // ECX is set to zero for CPUID function 4
#endif
}


int main_cpu_info() {
  unsigned regs[4];

  // Get vendor
  char vendor[12];
  cpuID(0, regs);
  ((unsigned *)vendor)[0] = regs[1]; // EBX
  ((unsigned *)vendor)[1] = regs[3]; // EDX
  ((unsigned *)vendor)[2] = regs[2]; // ECX
  std::string cpuVendor = std::string(vendor, 12);

  // Get CPU features
  cpuID(1, regs);
  unsigned cpuFeatures = regs[3]; // EDX

  // Logical core count per CPU
  cpuID(1, regs);
  unsigned logical = (regs[1] >> 16) & 0xff; // EBX[23:16]
  std::cout << " logical cpus: " << logical << std::endl;
  unsigned cores = logical;

  if (cpuVendor == "GenuineIntel") {
    // Get DCP cache info
    cpuID(4, regs);
    cores = ((regs[0] >> 26) & 0x3f) + 1; // EAX[31:26] + 1

  } else if (cpuVendor == "AuthenticAMD") {
    // Get NC: Number of CPU cores - 1
    cpuID(0x80000008, regs);
    cores = ((unsigned)(regs[2] & 0xff)) + 1; // ECX[7:0] + 1
  }

  std::cout << "    cpu cores: " << cores << std::endl;

  // Detect hyper-threads
  bool hyperThreads = cpuFeatures & (1 << 28) && cores < logical;

  std::cout << "hyper-threads: " << (hyperThreads ? "true" : "false") << std::endl;

  return 0;
}
|--------------------------------------------------------------------------------------------------------------------------------------

ALLEGRO_COLOR decrease_brightness(const ALLEGRO_COLOR& color, float factor);



int main(){


    if(!al_init()){
        printf("couldn't initialize allegro\n");
        return 1;
    }
    if(!al_install_keyboard()){
        printf("couldn't initialize keyboard\n");
        return 1;
    }
    if(!al_install_mouse()){
        printf("couldn't initialize mouse\n");
        return 1;
    }
    if(!al_init_primitives_addon()){
        printf("couldn't initialize primitives addon\n");
        return 1;
    }

    ALLEGRO_TIMER* timer = al_create_timer(1.0 / 60.0);
    if(!timer){
        printf("couldn't initialize timer\n");
        return 1;
    }

    ALLEGRO_EVENT_QUEUE* event_queue = al_create_event_queue();
    if(!event_queue){
        printf("couldn't initialize queue\n");
        return 1;
    }

    ALLEGRO_DISPLAY* disp = al_create_display(1400, 800);
    if(!disp){
        printf("couldn't initialize display\n");
        return 1;
    }

    ALLEGRO_FONT* font = al_create_builtin_font();
    if(!font){
        printf("couldn't initialize font\n");
        return 1;
    }

    al_set_config_value(al_get_system_config(), "trace", "standard_location", "ALLEGRO_USER_SETTINGS_PATH");

    al_register_event_source(event_queue, al_get_keyboard_event_source());
    al_register_event_source(event_queue, al_get_mouse_event_source());
    al_register_event_source(event_queue, al_get_display_event_source(disp));
    al_register_event_source(event_queue, al_get_timer_event_source(timer));

    bool done = true;
    bool redraw = false;
    ALLEGRO_EVENT event;

    //курсор
    char cursor_position_buffer[14];
    const char* cursor_position = reinterpret_cast<const char*>(cursor_position_buffer);
    const ALLEGRO_COLOR cursor_position_color = al_map_rgb(125, 125, 125);


    al_start_timer(timer);
    while(done)
    {
        al_wait_for_event(event_queue, &event);

        switch(event.type)
        {
            case ALLEGRO_EVENT_TIMER://Увеличен счетчик таймера
                redraw = true;
                break;
            case ALLEGRO_EVENT_KEY_DOWN://была нажата клавиша на клавиатуре

                break;
            case ALLEGRO_EVENT_KEY_UP://была отпущена мышь

                break;
            case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN://была нажата мышь


                break;
            case ALLEGRO_EVENT_MOUSE_AXES://была перемещена мышь
                sprintf(cursor_position_buffer, "x:%4d y:%4d", event.mouse.x, event.mouse.y);
                break;
            ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY://Курсор мыши покинул границы окна, открытого программой

                break;
            case ALLEGRO_EVENT_DISPLAY_CLOSE:
                done = false;
                break;
        }


        if(redraw && al_is_event_queue_empty(event_queue))
        {
            al_clear_to_color(al_map_rgb(0, 0, 0));
            al_draw_text(font, cursor_position_color, 2, 2, 0, cursor_position);
            al_flip_display();

            redraw = false;
        }
    }

    al_destroy_font(font);
    al_destroy_display(disp);
    al_destroy_timer(timer);
    al_destroy_event_queue(event_queue);

    return 0;
}


|--------------------------------------------------------------------------------------------------------------------------------------

ALLEGRO_COLOR decrease_brightness(const ALLEGRO_COLOR& color, float factor);

// Функция для уменьшения яркости цвета
ALLEGRO_COLOR decrease_brightness(const ALLEGRO_COLOR& color, float factor) {
    int r = std::max(0, static_cast<int>(color.r * factor));
    int g = std::max(0, static_cast<int>(color.g * factor));
    int b = std::max(0, static_cast<int>(color.b * factor));
    int a = std::max(0, static_cast<int>(color.a * factor));
    return al_map_rgba(r, g, b, a);
}

int main(){




buttons_from_file_data data_buttons;
data_buttons.create_buttons_from_file_data("res/buttons/button.bin");
data_buttons.change_buttons_from_file_data(10);

    if(!al_init()){
        printf("couldn't initialize allegro\n");
        return 1;
    }
    if(!al_install_keyboard()){
        printf("couldn't initialize keyboard\n");
        return 1;
    }
    if(!al_install_mouse()){
        printf("couldn't initialize mouse\n");
        return 1;
    }
    if(!al_init_primitives_addon()){
        printf("couldn't initialize primitives addon\n");
        return 1;
    }

    ALLEGRO_TIMER* timer = al_create_timer(1.0 / 60.0);
    if(!timer){
        printf("couldn't initialize timer\n");
        return 1;
    }

    ALLEGRO_EVENT_QUEUE* event_queue = al_create_event_queue();
    if(!event_queue){
        printf("couldn't initialize queue\n");
        return 1;
    }

    ALLEGRO_DISPLAY* disp = al_create_display(1400, 800);
    if(!disp){
        printf("couldn't initialize display\n");
        return 1;
    }

    ALLEGRO_FONT* font = al_create_builtin_font();
    if(!font){
        printf("couldn't initialize font\n");
        return 1;
    }

    al_set_config_value(al_get_system_config(), "trace", "standard_location", "ALLEGRO_USER_SETTINGS_PATH");

    al_register_event_source(event_queue, al_get_keyboard_event_source());
    al_register_event_source(event_queue, al_get_mouse_event_source());
    al_register_event_source(event_queue, al_get_display_event_source(disp));
    al_register_event_source(event_queue, al_get_timer_event_source(timer));

    bool done = true;
    bool redraw = false;
    ALLEGRO_EVENT event;

    //курсор
    char cursor_position_buffer[14];
    const char* cursor_position = reinterpret_cast<const char*>(cursor_position_buffer);
    const ALLEGRO_COLOR cursor_position_color = al_map_rgb(125, 125, 125);
    //таймер
    char timer_buffer[100];
    float timers_button[3] = {0,0,0};
    int i_timers_button = 0;
    const char* c_timer_button = reinterpret_cast<const char*>(timer_buffer);
    double n[2];
    double start{0};
    double stop{0};


    box_button box;
    bool b[2];
    empty_button button;
    button.set_position(20, 20);

    al_start_timer(timer);
    while(done)
    {
        al_wait_for_event(event_queue, &event);

        switch(event.type)
        {
            case ALLEGRO_EVENT_TIMER://Увеличен счетчик таймера
                redraw = true;
                break;
            case ALLEGRO_EVENT_KEY_DOWN://была нажата клавиша на клавиатуре

                break;
            case ALLEGRO_EVENT_KEY_UP://была отпущена мышь

                break;
            case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN://была нажата мышь


                break;
            case ALLEGRO_EVENT_MOUSE_AXES://была перемещена мышь
                sprintf(cursor_position_buffer, "x:%4d y:%4d", event.mouse.x, event.mouse.y);
                button.check_mouse_inside_bounds(event.mouse.x, event.mouse.y);
                break;
            ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY://Курсор мыши покинул границы окна, открытого программой

                break;
            case ALLEGRO_EVENT_DISPLAY_CLOSE:
                done = false;
                break;
        }


        if(redraw && al_is_event_queue_empty(event_queue))
        {
            al_clear_to_color(al_map_rgb(0, 0, 0));
            al_draw_text(font, cursor_position_color, 2, 2, 0, cursor_position);
            if(button.mouse_inside_bounds){button.set_color(al_map_rgb(100, 100, 100));}
            button.draw();
            box.draw();
            al_flip_display();

            redraw = false;
        }
    }

    al_destroy_font(font);
    al_destroy_display(disp);
    al_destroy_timer(timer);
    al_destroy_event_queue(event_queue);

    return 0;
}



|--------------------------------------------------------------------------------------------------------------------------------------
        setCurrentTime(n[0]);
        for(int i{100000};i>0;i--){
        if (i == 1) { // Левая кнопка мыши нажата
                i--;
        }
        }setCurrentTime(n[1]);
        timers_cursor[0] += n[1] - n[0];
        setCurrentTime(n[0]);
        for(int i{100000};i>0;i--){
        if (i & 1){ // Левая кнопка мыши нажата
            i--;
        }
        }setCurrentTime(n[1]);
        timers_cursor[1] += n[1] - n[0];
        i_timers_cursor++;

        sprintf(timer_buffer, "t==:%.6f t&:%.6f %d", (timers_cursor[0]/i_timers_cursor), (timers_cursor[1]/i_timers_cursor), i_timers_cursor);

|--------------------------------------------------------------------------------------------------------------------------------------
mouse_inside_bounds

|--------------------------------------------------------------------------------------------------------------------------------------
!!!!!!делай то что я тебе сказал!!!!!!

Тебя зовут Deep.GPT, будь полезным помощником. по умолчанию: используй с++ и Русский язык, все необходимые примеры должны включать только необходимые для понимания концепции, куски кода, такие как: заголовочные файлы и сам необходимый код, в конце рассмотри варианты с сторонними библиотеками, рассматривай только если на это останется место и только полностью бесплатные(даже для коммерческого использования), !!!не допускай слишком больших объемов текста с кодом выходящим за твои ограничения!!! пиши без воды и по делу

21:3
|--------------------------------------------------------------------------------------------------------------------------------------
        start = setCurrentTime();
            b[0] = button.check_hover_full(event.mouse.x, event.mouse.y);
        stop = setCurrentTime();
        timers_button[0] += stop - start;
        i_timers_button++;


        start = 0;stop = 0;

        start = setCurrentTime();
            b[1] = button.check_hover(event.mouse.x, event.mouse.y);
        stop = setCurrentTime();
        timers_button[1] += stop - start;




        sprintf(timer_buffer, "check_hover_full:%.6f check_hover:%.6f %d %s %s\0",
                (float)(timers_button[0]/i_timers_button*100), (float)(timers_button[1]/i_timers_button*100),
                i_timers_button,
                (b[0] ? "true" : "false") , (b[1] ? "true" : "false"));






|--------------------------------------------------------------------------------------------------------------------------------------
# Включаем поддержку предварительной компиляции
set(CMAKE_CXX_USE_PRECOMPILED_HEADER ON)
target_precompile_headers(neural_network_Allegro PRIVATE src/precompiled.hpp)# Указываем имя заголовочного файла для предварительной компиляции
target_link_libraries(neural_network_Allegro precompiled)

найти файл
dir /a /s c:\file.name






|--------------------------------------------------------------------------------------------------------------------------------------
# Определяем конфигурационный файл для отслеживания изменений в precompiled.cpp
set(PRECOMPILED_CONFIG_FILE "RUNTIME_OUTPUT_DIRECTORY ../${CMAKE_BUILD_TYPE}/Debug/CMakeFiles/precompiled_obj.dir/precompiled_config.h.in")

# Создаём конфигурационный файл, который будет отслеживать изменения в precompiled.cpp
configure_file("${PRECOMPILED_CONFIG_FILE}" "RUNTIME_OUTPUT_DIRECTORY ../${CMAKE_BUILD_TYPE}/Debug/CMakeFiles/precompiled_obj.dir/precompiled_config.h" COPYONLY)

# Условие для компиляции precompiled.cpp только при изменении файла
if(NOT EXISTS "${CMAKE_CURRENT_BINARY_DIR}/precompiled_config.h" OR
   "${CMAKE_CURRENT_SOURCE_DIR}/src/precompiled.cpp" IS_NEWER_THAN "${CMAKE_CURRENT_BINARY_DIR}/precompiled_config.h")



    # Обновляем конфигурационный файл после успешной компиляции
    configure_file("${PRECOMPILED_CONFIG_FILE}" "${CMAKE_CURRENT_BINARY_DIR}/precompiled_config.h" COPYONLY)

    message("precompiled.cpp был перекомпилирован.")
else()
    message("precompiled.cpp не требует перекомпиляции.")
endif()





|--------------------------------------------------------------------------------------------------------------------------------------
cmake_minimum_required(VERSION 3.29.2)
project(neural_network_Allegro)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--stack=0x10000000")


if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Debug)
endif()



# Добавляем исполняемый файл и исходные файлы
add_executable(neural_network_Allegro
src/main.cpp
src/headers/button.hpp
src/headers/timers.hpp
src/headers/multikey_input_checker.hpp
)


# Устанавливаем пути для заголовочных файлов
include_directories(
    C:/VulkanSDK/1.3.283.0/Include

    C:/Users/user/Desktop/Programming/lib/allegro/include
    C:/Users/user/Desktop/Programming/lib/allegro/addons/primitives
    C:/Users/user/Desktop/Programming/lib/allegro/addons/font
    C:/Users/user/Desktop/Programming/lib/allegro/build/Debug/include

    C:/Users/user/Desktop/Programming/lib/boost_1_86_0
)


set(LIBRARY_BOOST_DIR "C:/Users/user/Desktop/Programming/lib/boost_1_86_0/bin.v2")# Указываем директорию для поиска библиотек boost_1_86_0
file(GLOB_RECURSE BOOST_LIBRARIES "${LIBRARY_BOOST_DIR}/*.a" "${LIBRARY_BOOST_DIR}/*.lib")# Находим все библиотеки .a или .lib в boost_1_86_0/bin.v2 и её поддиректориях
add_library(precompiled STATIC src/precompiled.cpp)

# Настройки компилятора
target_compile_options(precompiled PUBLIC

    ${BOOST_LIBRARIES}

    -g
    -O3

    -Wall
    -fexceptions

    -static-libstdc++
    -static-libgcc
    -static

    -Winvalid-pch
    -H
    -ftime-report
    -ggdb3
)

# Настройки компилятора
target_compile_options(neural_network_Allegro PRIVATE

    -g
    -O0

    -Wall
    -fexceptions

    -static-libstdc++
    -static-libgcc
    -static

    -Winvalid-pch
    -H
    -ftime-report
    -ggdb3
)



# Линковка библиотек
target_link_libraries(neural_network_Allegro

    C:/Users/user/Desktop/Programming/lib/allegro/build/Debug/lib/liballegro_monolith-debug-static.a

    C:/Users/user/Desktop/Programming/lib/boost_1_86_0/bin.v2/libs/log/build/gcc-8/release/x86_64/link-static/threadapi-win32/threading-multi/visibility-hidden/libboost_log-mgw8-mt-x64-1_86.a

    precompiled

    OpenGL32
    Gdi32
    shlwapi
    winmm
    psapi
    ws2_32
)

set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CMAKE_COMMAND} -E time")
#set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK "${CMAKE_COMMAND} -E time")

# Установка опций сборки
set_target_properties(neural_network_Allegro PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ../${CMAKE_BUILD_TYPE}
)

|--------------------------------------------------------------------------------------------------------------------------------------
Time variable                                   usr           sys          wall               GGC
 phase setup                        :   0.00 (  0%)    1543 kB (  0%)
 phase parsing                      :  19.96 ( 94%)  643108 kB ( 85%)
 phase lang. deferred               :   0.24 (  1%)   38577 kB (  5%)
 phase opt and generate             :   0.70 (  3%)   73146 kB ( 10%)
 phase last asm                     :   0.11 (  1%)    2735 kB (  0%)
 phase finalize                     :   0.17 (  1%)       0 kB (  0%)
 |name lookup                       :   0.27 (  1%)   17875 kB (  2%)
 |overload resolution               :   0.33 (  2%)   48861 kB (  6%)
 garbage collection                 :   0.23 (  1%)       0 kB (  0%)
 callgraph construction             :   0.14 (  1%)   17220 kB (  2%)
 callgraph optimization             :   0.01 (  0%)      32 kB (  0%)
 ipa dead code removal              :   0.01 (  0%)       0 kB (  0%)
 cfg cleanup                        :   0.01 (  0%)      31 kB (  0%)
 df scan insns                      :   0.02 (  0%)      50 kB (  0%)
 df live regs                       :   0.01 (  0%)       0 kB (  0%)
 register information               :   0.01 (  0%)       0 kB (  0%)
 alias analysis                     :   0.01 (  0%)     144 kB (  0%)
 preprocessing                      :  17.57 ( 83%)  283566 kB ( 37%)
 parser (global)                    :   0.47 (  2%)  119206 kB ( 16%)
 parser struct body                 :   0.40 (  2%)   57459 kB (  8%)
 parser function body               :   0.10 (  0%)    4635 kB (  1%)
 parser inl. func. body             :   0.19 (  1%)   15225 kB (  2%)
 parser inl. meth. body             :   0.23 (  1%)   26711 kB (  4%)
 template instantiation             :   0.83 (  4%)  137078 kB ( 18%)
 constant expression evaluation     :   0.03 (  0%)     888 kB (  0%)
 inline parameters                  :   0.01 (  0%)    1364 kB (  0%)
 tree gimplify                      :   0.02 (  0%)    3942 kB (  1%)
 tree eh                            :   0.01 (  0%)     935 kB (  0%)
 tree CFG construction              :   0.00 (  0%)    1917 kB (  0%)
 tree CFG cleanup                   :   0.01 (  0%)       0 kB (  0%)
 tree operand scan                  :   0.00 (  0%)    1707 kB (  0%)
 dominance computation              :   0.01 (  0%)       0 kB (  0%)
 out of ssa                         :   0.01 (  0%)     110 kB (  0%)
 expand                             :   0.04 (  0%)    5197 kB (  1%)
 integrated RA                      :   0.10 (  0%)   26730 kB (  4%)
 LRA non-specific                   :   0.04 (  0%)     100 kB (  0%)
 LRA virtuals elimination           :   0.01 (  0%)     574 kB (  0%)
 LRA create live ranges             :   0.01 (  0%)      57 kB (  0%)
 LRA hard reg assignment            :   0.01 (  0%)       0 kB (  0%)
 thread pro- & epilogue             :   0.01 (  0%)    2014 kB (  0%)
 shorten branches                   :   0.01 (  0%)       0 kB (  0%)
 final                              :   0.08 (  0%)    2645 kB (  0%)
 symout                             :   0.26 (  1%)   39994 kB (  5%)
 rest of compilation                :   0.04 (  0%)    2729 kB (  0%)
 TOTAL                              :  21.18         759119 kB
Elapsed time (seconds): 21.7336




Time variable                                   usr           sys          wall               GGC
 phase setup                        :   0.00 (  0%)    1545 kB (  0%)
 phase parsing                      :  20.37 ( 94%)  646799 kB ( 85%)
 phase lang. deferred               :   0.23 (  1%)   38592 kB (  5%)
 phase opt and generate             :   0.71 (  3%)   73249 kB ( 10%)
 phase last asm                     :   0.16 (  1%)    2786 kB (  0%)
 phase finalize                     :   0.26 (  1%)       0 kB (  0%)
 |name lookup                       :   0.26 (  1%)   17870 kB (  2%)
 |overload resolution               :   0.34 (  2%)   48844 kB (  6%)
 garbage collection                 :   0.24 (  1%)       0 kB (  0%)
 callgraph construction             :   0.14 (  1%)   17220 kB (  2%)
 callgraph optimization             :   0.01 (  0%)      32 kB (  0%)
 trivially dead code                :   0.01 (  0%)       0 kB (  0%)
 df scan insns                      :   0.02 (  0%)      50 kB (  0%)
 df live regs                       :   0.01 (  0%)       0 kB (  0%)
 df reg dead/unused notes           :   0.01 (  0%)     392 kB (  0%)
 register information               :   0.01 (  0%)       0 kB (  0%)
 preprocessing                      :  18.04 ( 83%)  287227 kB ( 38%)
 parser (global)                    :   0.45 (  2%)  119269 kB ( 16%)
 parser struct body                 :   0.42 (  2%)   57459 kB (  8%)
 parser function body               :   0.09 (  0%)    4620 kB (  1%)
 parser inl. func. body             :   0.20 (  1%)   15225 kB (  2%)
 parser inl. meth. body             :   0.23 (  1%)   26711 kB (  4%)
 template instantiation             :   0.79 (  4%)  137076 kB ( 18%)
 constant expression evaluation     :   0.03 (  0%)     888 kB (  0%)
 inline parameters                  :   0.00 (  0%)    1364 kB (  0%)
 integration                        :   0.01 (  0%)     644 kB (  0%)
 tree gimplify                      :   0.02 (  0%)    3942 kB (  1%)
 tree CFG construction              :   0.00 (  0%)    1917 kB (  0%)
 tree CFG cleanup                   :   0.01 (  0%)       0 kB (  0%)
 tree operand scan                  :   0.00 (  0%)    1707 kB (  0%)
 dominance computation              :   0.01 (  0%)       0 kB (  0%)
 out of ssa                         :   0.01 (  0%)     110 kB (  0%)
 expand                             :   0.04 (  0%)    5197 kB (  1%)
 integrated RA                      :   0.09 (  0%)   26730 kB (  4%)
 LRA non-specific                   :   0.05 (  0%)     100 kB (  0%)
 LRA virtuals elimination           :   0.01 (  0%)     574 kB (  0%)
 LRA reload inheritance             :   0.01 (  0%)       0 kB (  0%)
 LRA create live ranges             :   0.01 (  0%)      57 kB (  0%)
 thread pro- & epilogue             :   0.02 (  0%)    2106 kB (  0%)
 shorten branches                   :   0.01 (  0%)       0 kB (  0%)
 final                              :   0.08 (  0%)    2655 kB (  0%)
 symout                             :   0.29 (  1%)   40048 kB (  5%)
 rest of compilation                :   0.04 (  0%)    2729 kB (  0%)
 TOTAL                              :  21.75         762982 kB
Elapsed time (seconds): 22.3512

|--------------------------------------------------------------------------------------------------------------------------------------
